// Adopted from Etherscan: https://etherscan.io/token/0xdac17f958d2ee523a2206206994597c13d831ec7#code

// views
.decl *owner(p: address)
.decl *paused(b: bool)
.decl *totalSupply(n: uint)
.decl balanceOf(p: address, n: uint)[0]
.decl *rate(r: uint)
.decl *maxFee(m: uint)
.decl allowance(p: address, s: address, n:uint)[0,1]
.decl isBlackListed(p: address, b:bool)[0]

.decl transferWithFee(from:address, to:address, fee:uint, amount: uint)
.decl transferWithoutFee(from: address, to: address, amount: uint)
// .decl transfer(from: address, to: address, amount: uint)
.decl transferFromWithFee(from:address, to:address, spender:address, fee:uint, amount: uint)
.decl transferFromWithoutFee(from: address, to: address, spender: address, amount: uint)
// .decl transferFrom(from: address, to: address, spender: address, amount: uint)

// constructor
.decl constructor(n: uint)

// transactions

.decl issue(p: address, amount: uint)
.decl recv_issue(amount: uint)

.decl redeem(p: address, amount: uint)
.decl recv_redeem(amount: uint)

.decl transfer(from:address, to:address, fee:uint, amount: uint)
.decl recv_transfer(to: address, amount: uint)
.decl recv_transferFrom(from: address, to: address, amount: uint)
.decl transferFrom(from:address, to:address, spender:address, fee:uint, amount: uint)
.decl increaseAllowance(p: address, s: address, n:uint)
.decl recv_approve(s: address, n:uint)
.decl approve(o: address, s: address, n: uint)
.decl recv_addBlackList(p:address)
.decl addBlackList(p:address)
.decl recv_removeBlackList(p:address)
.decl removeBlackList(p:address)
.decl destroyBlackFunds(p:address,n:uint)
.decl recv_destroyBlackFunds(p:address)
.decl recv_setParams(b: uint, f: uint)
.decl setParams(b: uint, f: uint)
.decl recv_transferOwnership(o: address)
.decl transferOwnership(o: address)
.decl recv_pause()
.decl *pause(b: bool)
.decl recv_unpause()
.decl *unpause(b: bool)

// Interfaces
.public recv_issue
.public recv_redeem
.public recv_transfer
.public balanceOf(1)
.public totalSupply(0)
.public recv_destroyBlackFunds
.public recv_addBlackList
.public recv_removeBlackList
.public recv_approve
.public recv_transferFrom
.public allowance(2)
.public recv_setParams
.public recv_transferOwnership
.public recv_pause
.public recv_unpause


// Rules
owner(s) :- constructor(_), msgSender(s).
totalSupply(n) :- constructor(n).
balanceOf(s,n) :- constructor(n), msgSender(s).
paused(false) :- constructor(_).
rate(0) :- constructor(_).
maxFee(0) :- constructor(_).
setParams(b,f) :- recv_setParams(b,f), msgSender(s), owner(s), b<20, f<50.
rate(b) :- setParams(b,_).
maxFee(f) :- setParams(_,f).

transferOwnership(o) :- recv_transferOwnership(o), msgSender(s), owner(s), o!=0.
owner(s) :- transferOwnership(s).


.decl totalIssue(p: address, n: uint)[0]
.decl totalRedeem(p: address, n: uint)[0]
.decl totalOut(p: address, n: uint)[0]
.decl totalIn(p: address, n: uint)[0]
totalOut(p,s) :- transferWithoutFee(p,_,_), s = sum n: transferWithoutFee(p,_,n).
totalIn(p,s) :- transferWithoutFee(_,p,_), s = sum n: transferWithoutFee(_,p,n).
totalIssue(p,s) :- issue(p,_), s = sum n: issue(p,n).
totalRedeem(p,s) :- redeem(p,_), s = sum n: redeem(p,n).
balanceOf(p,s) :- totalIssue(p,n), totalRedeem(p,m), totalOut(p,o), totalIn(p,i), s:=n+i-m-o.

.decl *allIssue(n: uint)
.decl *allRedeem(n: uint)
allIssue(s) :- s = sum n: issue(_,n).
allRedeem(s) :- s = sum n: redeem(_,n).
totalSupply(n) :- allIssue(m), allRedeem(b), n := m - b.

issue(s,n) :- recv_issue(n), msgSender(s), owner(s), s!=0.
redeem(s,n) :- recv_redeem(n), msgSender(s), owner(s), s!=0, balanceOf(s,m), n<=m.

pause(true) :- recv_pause(), msgSender(s), owner(s), paused(false).
paused(p) :- pause(p).
unpause(false) :- recv_unpause(), msgSender(s), owner(s), paused(true).
paused(p) :- unpause(p).


transfer(s,r,f,n) :- recv_transfer(r,n), msgSender(s), balanceOf(s,m), n<=m, isBlackListed(s,false), rate(rt), maxFee(mf), f := min(rt*n/10000, mf).
transferWithFee(s,r,f,n) :- transfer(s,r,f,n).
transferWithoutFee(s,r,m) :- transferWithFee(s,r,f,n), m := n-f.
transferWithoutFee(s,o,f) :- transferWithFee(s,r,f,_), owner(o).


addBlackList(p) :- recv_addBlackList(p),msgSender(s),owner(s).
isBlackListed(p,true) :- addBlackList(p).


removeBlackList(p) :- recv_removeBlackList(p),msgSender(s),owner(s).
isBlackListed(p,false) :- removeBlackList(p).


destroyBlackFunds(p,n) :- recv_destroyBlackFunds(p),msgSender(s),owner(s), isBlackListed(p,true), balanceOf(p,n), p!=0, n>0.
redeem(p,n) :- destroyBlackFunds(p,n).



transferFrom(o,r,s,f,n) :- recv_transferFrom(o,r,n), balanceOf(o,m), m>=n, msgSender(s), allowance(o,s,k), k>=n, isBlackListed(o,false), rate(rt), maxFee(mf), f := min(rt*n/10000, mf).
transferFromWithFee(o,r,s,f,n) :- transferFrom(o,r,s,f,n).
transferFromWithoutFee(o,r,s,m) :- transferFromWithFee(o,r,s,f,n), m := n-f.
transferFromWithoutFee(o,p,s,f) :- transferFromWithFee(o,r,s,f,_), owner(p).
transferWithoutFee(o,r,n) :- transferFromWithoutFee(o,r,_,n).

increaseAllowance(o,s,d) :- recv_approve(s,n), msgSender(o), allowance(o,s,m), d:=n-m.

.decl allowanceTotal(o:address, s:address, m:uint)[0,1]
.decl spentTotal(o:address, s:address, m:uint)[0,1]
allowanceTotal(o,s,m) :- increaseAllowance(o,s,_), m = sum n: increaseAllowance(o,s,n).
spentTotal(o,s,m) :- transferFromWithoutFee(o,_,s,_), m = sum n: transferFromWithoutFee(o,_,s,n).

allowance(o,s,n) :- allowanceTotal(o,s,m), spentTotal(o,s,l), n := m-l.

// Properties
.decl *totalBalances(m: uint)
.decl *unequalBalance(s: uint, n: uint)
.violation unequalBalance
totalBalances(n) :- constructor(n).
totalBalances(s) :- s = sum n: balanceOf(_,n).
unequalBalance(s,n) :- totalBalances(s), totalSupply(n), s!=n.
