// The controllable token contract following ERC 1644 standard.

// parameters
.decl *owner(p: address)
.decl *controller(p: address)

// views
.decl *totalSupply(n: uint)
.decl balanceOf(p: address, n: uint)[0]
.decl allowance(p: address, s: address, n:uint)[0,1]
.decl *name(n: uint)
.decl *symbol(n: uint)
.decl *decimals(n: uint)

// constructor
.decl constructor(p: address)


// ERC20 Transactions
.decl recv_transfer(to: address, amount: uint)
.decl transfer(from: address, to: address, amount: uint)
.decl recv_approve(s: address, n:uint)
.decl approve(owner: address, spender: address, n:uint)
.decl recv_transferFrom(from: address, to: address, amount: uint)
.decl transferFrom(from: address, to: address, spender: address, amount: uint)
.decl recv_increaseAllowance(spender: address, n:uint)
.decl increaseAllowance(owner: address, spender: address, n:uint)
.decl recv_decreaseAllowance(spender: address, n: uint)
.decl decreaseAllowance(owner: address, spender: address, n: uint)

// other Transactions
.decl mint(p: address, amount: uint)
.decl recv_mint(p: address, amount: uint)
.decl burn(p: address, amount: uint)
.decl recv_burn(p: address, amount: uint)
.decl recv_controllerTransfer(from: address, to: address, amount: uint)
.decl controllerTransfer(from: address, to: address, amount: uint)
.decl recv_controllerRedeem(p: address, amount: uint)
.decl controllerRedeem(p: address, amount: uint)


// Interfaces
.public balanceOf(1)
.public totalSupply(0)
.public allowance(2)
.public name(0)
.public symbol(0)
.public decimals(0)
.public recv_transfer
.public recv_approve
.public recv_transferFrom
.public recv_increaseAllowance
.public recv_decreaseAllowance
.public recv_mint
.public recv_burn
.public recv_controllerRedeem
.public recv_controllerTransfer

// Rules for parameters
owner(s) :- constructor(_), msgSender(s).
controller(p) :- constructor(p).

// Rules for views 
totalSupply(0) :- constructor(_).
.decl *allMint(n: uint)
.decl *allBurn(n: uint)
allMint(s) :- s = sum n: mint(_,n).
allBurn(s) :- s = sum n: burn(_,n).
totalSupply(n) :- allMint(m), allBurn(b), n := m - b.

.decl totalMint(p: address, n: uint)[0]
.decl totalBurn(p: address, n: uint)[0]
.decl totalOut(p: address, n: uint)[0]
.decl totalIn(p: address, n: uint)[0]
totalOut(p,s) :- transfer(p,_,_), s = sum n: transfer(p,_,n).
totalIn(p,s) :- transfer(_,p,_), s = sum n: transfer(_,p,n).
totalMint(p,s) :- mint(p,_), s = sum n: mint(p,n).
totalBurn(p,s) :- burn(p,_), s = sum n: burn(p,n).
balanceOf(p,s) :- totalMint(p,n), totalBurn(p,m), totalOut(p,o), totalIn(p,i), s:=n+i-m-o.

.decl increaseAllowanceTotal(o:address, s:address, m:uint)[0,1]
.decl decreaseAllowanceTotal(o:address, s:address, m:uint)[0,1]
.decl spentTotal(o:address, s:address, m:uint)[0,1]
increaseAllowance(o,s,n) :- recv_increaseAllowance(s,n), msgSender(o).
decreaseAllowance(o,s,n) :- recv_decreaseAllowance(s,n), msgSender(o).
increaseAllowanceTotal(o,s,m) :- increaseAllowance(o,s,_), m = sum n: increaseAllowance(o,s,n).
decreaseAllowanceTotal(o,s,m) :- decreaseAllowance(o,s,_), m = sum n: decreaseAllowance(o,s,n).
spentTotal(o,s,m) :- transferFrom(o,_,s,_), m = sum n: transferFrom(o,_,s,n).
allowance(o,s,n) :- increaseAllowanceTotal(o,s,m), decreaseAllowanceTotal(o,s,d), spentTotal(o,s,l), n := m-l-d.

// initialize as symbol/string won't work?
name(0) :- constructor(_).
symbol(0) :- constructor(_).
decimals(18) :- constructor(_).

// Rules for transactions
transfer(s,r,n) :- recv_transfer(r,n), msgSender(s), balanceOf(s,m), n<=m.
transfer(s,r,n) :- controllerTransfer(s,r,n).

mint(p,n) :- recv_mint(p,n), msgSender(s), p!=0.
burn(p,n) :- recv_burn(p,n), msgSender(s), p!=0, balanceOf(p,m), n<=m.

controllerTransfer(s,r,n) :- recv_controllerTransfer(s,r,n), msgSender(c), controller(c), balanceOf(s,m), n<=m.

controllerRedeem(p,n) :- recv_controllerRedeem(p,n), msgSender(c), controller(c), p!=0, balanceOf(p,m), n<=m.
burn(p,n) :- controllerRedeem(p,n).

transferFrom(o,r,s,n) :- recv_transferFrom(o,r,n), balanceOf(o,m), m>=n, msgSender(s), allowance(o,s,k), k>=n.
transfer(o,r,n) :- transferFrom(o,r,_,n).

increaseAllowance(o,s,d) :- recv_approve(s,n), msgSender(o), allowance(o,s,m), n>=m, d:=n-m.
decreaseAllowance(o,s,d) :- recv_approve(s,n), msgSender(o), allowance(o,s,m), n<m, d:=m-n.

// Properties
.decl *totalBalances(m: uint)
.decl *unequalBalance(s: uint, n: uint)
.violation unequalBalance
totalBalances(0) :- constructor(_).
totalBalances(s) :- s = sum n: balanceOf(_,n).
unequalBalance(s,n) :- totalBalances(s), totalSupply(n), s!=n.